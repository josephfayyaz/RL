import os,sys
import ctypes
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(file), '..')))
mujoco_path = "C:/.mujoco/mujoco210/bin"  # manually append library for running on windoes
os.environ["PATH"] += ";" + mujoco_path
ctypes.CDLL(os.path.join(mujoco_path, "mujoco210.dll"))
import gym
import numpy as np
import matplotlib.pyplot as plt
from stable_baselines3 import PPO  # or your RL library of choice
import time
import random, numpy as np
import gym
from datetime import datetime
import csv
from env.custom_hopper import *

# 1. Load your saved model
model = PPO.load(r".\Logs\csv\PPO_CDR_ES\PPO_Domain_cdr_ES_True_seed_0_(CustomHopper-cdr-v0_CustomHopper-target-v0).zip")

# 2. Wrap the environment to inject ε-bounded noise
class ObsNoiseWrapper(gym.ObservationWrapper):
    def init(self, env, eps):
        super().init(env)
        self.eps = eps
    def observation(self, obs):
        noise = np.random.uniform(-self.eps, self.eps, size=obs.shape)
        return obs + noise

def make_noisy_env(eps):
    base_env = gym.make("CustomHopper-target-v0")
    return ObsNoiseWrapper(base_env, eps)

# 3. Evaluation function under a given ε
def evaluate(model, eps, n_episodes=30):
    env = make_noisy_env(eps)
    returns = []
    for _ in range(n_episodes):
        obs = env.reset()
        done = False
        total_r = 0.0
        while not done:
            env.render()
            action, _ = model.predict(obs, deterministic=True)
            obs, r, done, _ = env.step(action)
            total_r += r
        returns.append(total_r)
    env.close()
    return np.mean(returns)

# 4. Sweep ε and record J(ε)
epsilons = np.linspace(0.0, 0.5, 11)   # e.g. from no noise to ±0.5
mean_returns = []
for eps in epsilons:
    jr = evaluate(model, eps, n_episodes=30)
    mean_returns.append(jr)
    print(f"ε={eps:.2f} → return={jr:.1f}")

# 5. Plot the robustness curve
plt.figure(figsize=(6,4))
plt.plot(epsilons, mean_returns, marker='o')
plt.xlabel("Perturbation size ε")
plt.ylabel("Avg. return J(ε)")
plt.title("Robustness Curve for PPO_CDR")
plt.grid(True)
plt.tight_layout()
plt.show()
